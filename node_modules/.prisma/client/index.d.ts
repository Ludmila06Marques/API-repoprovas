
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  email: string
  password: string
}

/**
 * Model Categories
 * 
 */
export type Categories = {
  id: number
  name: string
}

/**
 * Model Tests
 * 
 */
export type Tests = {
  id: number
  name: string
  pdfUrl: string
  categoryId: number
  teachersDisciplineId: number
}

/**
 * Model TeachersDisciplines
 * 
 */
export type TeachersDisciplines = {
  id: number
  teacherId: number
  disciplineId: number
}

/**
 * Model Teachers
 * 
 */
export type Teachers = {
  id: number
  name: string
}

/**
 * Model Disciplines
 * 
 */
export type Disciplines = {
  id: number
  name: string
  termId: number
}

/**
 * Model Terms
 * 
 */
export type Terms = {
  id: number
  number: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<GlobalReject>;

  /**
   * `prisma.tests`: Exposes CRUD operations for the **Tests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.tests.findMany()
    * ```
    */
  get tests(): Prisma.TestsDelegate<GlobalReject>;

  /**
   * `prisma.teachersDisciplines`: Exposes CRUD operations for the **TeachersDisciplines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeachersDisciplines
    * const teachersDisciplines = await prisma.teachersDisciplines.findMany()
    * ```
    */
  get teachersDisciplines(): Prisma.TeachersDisciplinesDelegate<GlobalReject>;

  /**
   * `prisma.teachers`: Exposes CRUD operations for the **Teachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teachers.findMany()
    * ```
    */
  get teachers(): Prisma.TeachersDelegate<GlobalReject>;

  /**
   * `prisma.disciplines`: Exposes CRUD operations for the **Disciplines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.disciplines.findMany()
    * ```
    */
  get disciplines(): Prisma.DisciplinesDelegate<GlobalReject>;

  /**
   * `prisma.terms`: Exposes CRUD operations for the **Terms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.terms.findMany()
    * ```
    */
  get terms(): Prisma.TermsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Categories: 'Categories',
    Tests: 'Tests',
    TeachersDisciplines: 'TeachersDisciplines',
    Teachers: 'Teachers',
    Disciplines: 'Disciplines',
    Terms: 'Terms'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */


  export type CategoriesCountOutputType = {
    Tests: number
  }

  export type CategoriesCountOutputTypeSelect = {
    Tests?: boolean
  }

  export type CategoriesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoriesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoriesCountOutputType
    : S extends undefined
    ? never
    : S extends CategoriesCountOutputTypeArgs
    ?'include' extends U
    ? CategoriesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoriesCountOutputType ? CategoriesCountOutputType[P] : never
  } 
    : CategoriesCountOutputType
  : CategoriesCountOutputType




  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     * 
    **/
    select?: CategoriesCountOutputTypeSelect | null
  }



  /**
   * Count Type TeachersDisciplinesCountOutputType
   */


  export type TeachersDisciplinesCountOutputType = {
    Tests: number
  }

  export type TeachersDisciplinesCountOutputTypeSelect = {
    Tests?: boolean
  }

  export type TeachersDisciplinesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeachersDisciplinesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeachersDisciplinesCountOutputType
    : S extends undefined
    ? never
    : S extends TeachersDisciplinesCountOutputTypeArgs
    ?'include' extends U
    ? TeachersDisciplinesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeachersDisciplinesCountOutputType ? TeachersDisciplinesCountOutputType[P] : never
  } 
    : TeachersDisciplinesCountOutputType
  : TeachersDisciplinesCountOutputType




  // Custom InputTypes

  /**
   * TeachersDisciplinesCountOutputType without action
   */
  export type TeachersDisciplinesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplinesCountOutputType
     * 
    **/
    select?: TeachersDisciplinesCountOutputTypeSelect | null
  }



  /**
   * Count Type TeachersCountOutputType
   */


  export type TeachersCountOutputType = {
    TeachersDisciplines: number
  }

  export type TeachersCountOutputTypeSelect = {
    TeachersDisciplines?: boolean
  }

  export type TeachersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeachersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeachersCountOutputType
    : S extends undefined
    ? never
    : S extends TeachersCountOutputTypeArgs
    ?'include' extends U
    ? TeachersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeachersCountOutputType ? TeachersCountOutputType[P] : never
  } 
    : TeachersCountOutputType
  : TeachersCountOutputType




  // Custom InputTypes

  /**
   * TeachersCountOutputType without action
   */
  export type TeachersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeachersCountOutputType
     * 
    **/
    select?: TeachersCountOutputTypeSelect | null
  }



  /**
   * Count Type DisciplinesCountOutputType
   */


  export type DisciplinesCountOutputType = {
    TeachersDisciplines: number
  }

  export type DisciplinesCountOutputTypeSelect = {
    TeachersDisciplines?: boolean
  }

  export type DisciplinesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DisciplinesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DisciplinesCountOutputType
    : S extends undefined
    ? never
    : S extends DisciplinesCountOutputTypeArgs
    ?'include' extends U
    ? DisciplinesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DisciplinesCountOutputType ? DisciplinesCountOutputType[P] : never
  } 
    : DisciplinesCountOutputType
  : DisciplinesCountOutputType




  // Custom InputTypes

  /**
   * DisciplinesCountOutputType without action
   */
  export type DisciplinesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DisciplinesCountOutputType
     * 
    **/
    select?: DisciplinesCountOutputTypeSelect | null
  }



  /**
   * Count Type TermsCountOutputType
   */


  export type TermsCountOutputType = {
    Disciplines: number
  }

  export type TermsCountOutputTypeSelect = {
    Disciplines?: boolean
  }

  export type TermsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TermsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TermsCountOutputType
    : S extends undefined
    ? never
    : S extends TermsCountOutputTypeArgs
    ?'include' extends U
    ? TermsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TermsCountOutputType ? TermsCountOutputType[P] : never
  } 
    : TermsCountOutputType
  : TermsCountOutputType




  // Custom InputTypes

  /**
   * TermsCountOutputType without action
   */
  export type TermsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TermsCountOutputType
     * 
    **/
    select?: TermsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Users ? Users[P] : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users: findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users: findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users: findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = UsersFindUniqueArgsBase
      

  /**
   * Users: findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = UsersFindFirstArgsBase
      

  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
  }



  /**
   * Model Categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoriesAggregateArgs = {
    /**
     * Filter which Categories to aggregate.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs = {
    where?: CategoriesWhereInput
    orderBy?: Enumerable<CategoriesOrderByWithAggregationInput>
    by: Array<CategoriesScalarFieldEnum>
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect = {
    id?: boolean
    name?: boolean
    Tests?: boolean | TestsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type CategoriesInclude = {
    Tests?: boolean | TestsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type CategoriesGetPayload<
    S extends boolean | null | undefined | CategoriesArgs,
    U = keyof S
      > = S extends true
        ? Categories
    : S extends undefined
    ? never
    : S extends CategoriesArgs | CategoriesFindManyArgs
    ?'include' extends U
    ? Categories  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Tests' ? Array < TestsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Tests' ? Array < TestsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Categories ? Categories[P] : never
  } 
    : Categories
  : Categories


  type CategoriesCountArgs = Merge<
    Omit<CategoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }
  >

  export interface CategoriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Categories'> extends True ? CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Categories'> extends True ? CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriesFindManyArgs>(
      args?: SelectSubset<T, CategoriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Categories>>, PrismaPromise<Array<CategoriesGetPayload<T>>>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends CategoriesCreateArgs>(
      args: SelectSubset<T, CategoriesCreateArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesCreateManyArgs>(
      args?: SelectSubset<T, CategoriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesDeleteArgs>(
      args: SelectSubset<T, CategoriesDeleteArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesUpdateArgs>(
      args: SelectSubset<T, CategoriesUpdateArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesUpdateManyArgs>(
      args: SelectSubset<T, CategoriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesUpsertArgs>(
      args: SelectSubset<T, CategoriesUpsertArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Find one Categories that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoriesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Find the first Categories that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoriesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Tests<T extends TestsFindManyArgs = {}>(args?: Subset<T, TestsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tests>>, PrismaPromise<Array<TestsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Categories base type for findUnique actions
   */
  export type CategoriesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }

  /**
   * Categories: findUnique
   */
  export interface CategoriesFindUniqueArgs extends CategoriesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categories base type for findFirst actions
   */
  export type CategoriesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }

  /**
   * Categories: findFirst
   */
  export interface CategoriesFindFirstArgs extends CategoriesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * Categories create
   */
  export type CategoriesCreateArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The data needed to create a Categories.
     * 
    **/
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }


  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Categories update
   */
  export type CategoriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The data needed to update a Categories.
     * 
    **/
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoriesWhereInput
  }


  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The filter to search for the Categories to update in case it exists.
     * 
    **/
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     * 
    **/
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }


  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter which Categories to delete.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoriesWhereInput
  }


  /**
   * Categories: findUniqueOrThrow
   */
  export type CategoriesFindUniqueOrThrowArgs = CategoriesFindUniqueArgsBase
      

  /**
   * Categories: findFirstOrThrow
   */
  export type CategoriesFindFirstOrThrowArgs = CategoriesFindFirstArgsBase
      

  /**
   * Categories without action
   */
  export type CategoriesArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
  }



  /**
   * Model Tests
   */


  export type AggregateTests = {
    _count: TestsCountAggregateOutputType | null
    _avg: TestsAvgAggregateOutputType | null
    _sum: TestsSumAggregateOutputType | null
    _min: TestsMinAggregateOutputType | null
    _max: TestsMaxAggregateOutputType | null
  }

  export type TestsAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teachersDisciplineId: number | null
  }

  export type TestsSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    teachersDisciplineId: number | null
  }

  export type TestsMinAggregateOutputType = {
    id: number | null
    name: string | null
    pdfUrl: string | null
    categoryId: number | null
    teachersDisciplineId: number | null
  }

  export type TestsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    pdfUrl: string | null
    categoryId: number | null
    teachersDisciplineId: number | null
  }

  export type TestsCountAggregateOutputType = {
    id: number
    name: number
    pdfUrl: number
    categoryId: number
    teachersDisciplineId: number
    _all: number
  }


  export type TestsAvgAggregateInputType = {
    id?: true
    categoryId?: true
    teachersDisciplineId?: true
  }

  export type TestsSumAggregateInputType = {
    id?: true
    categoryId?: true
    teachersDisciplineId?: true
  }

  export type TestsMinAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teachersDisciplineId?: true
  }

  export type TestsMaxAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teachersDisciplineId?: true
  }

  export type TestsCountAggregateInputType = {
    id?: true
    name?: true
    pdfUrl?: true
    categoryId?: true
    teachersDisciplineId?: true
    _all?: true
  }

  export type TestsAggregateArgs = {
    /**
     * Filter which Tests to aggregate.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestsMaxAggregateInputType
  }

  export type GetTestsAggregateType<T extends TestsAggregateArgs> = {
        [P in keyof T & keyof AggregateTests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTests[P]>
      : GetScalarType<T[P], AggregateTests[P]>
  }




  export type TestsGroupByArgs = {
    where?: TestsWhereInput
    orderBy?: Enumerable<TestsOrderByWithAggregationInput>
    by: Array<TestsScalarFieldEnum>
    having?: TestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestsCountAggregateInputType | true
    _avg?: TestsAvgAggregateInputType
    _sum?: TestsSumAggregateInputType
    _min?: TestsMinAggregateInputType
    _max?: TestsMaxAggregateInputType
  }


  export type TestsGroupByOutputType = {
    id: number
    name: string
    pdfUrl: string
    categoryId: number
    teachersDisciplineId: number
    _count: TestsCountAggregateOutputType | null
    _avg: TestsAvgAggregateOutputType | null
    _sum: TestsSumAggregateOutputType | null
    _min: TestsMinAggregateOutputType | null
    _max: TestsMaxAggregateOutputType | null
  }

  type GetTestsGroupByPayload<T extends TestsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestsGroupByOutputType[P]>
            : GetScalarType<T[P], TestsGroupByOutputType[P]>
        }
      >
    >


  export type TestsSelect = {
    id?: boolean
    name?: boolean
    pdfUrl?: boolean
    category?: boolean | CategoriesArgs
    teachersDiscipline?: boolean | TeachersDisciplinesArgs
    categoryId?: boolean
    teachersDisciplineId?: boolean
  }

  export type TestsInclude = {
    category?: boolean | CategoriesArgs
    teachersDiscipline?: boolean | TeachersDisciplinesArgs
  }

  export type TestsGetPayload<
    S extends boolean | null | undefined | TestsArgs,
    U = keyof S
      > = S extends true
        ? Tests
    : S extends undefined
    ? never
    : S extends TestsArgs | TestsFindManyArgs
    ?'include' extends U
    ? Tests  & {
    [P in TrueKeys<S['include']>]:
        P extends 'category' ? CategoriesGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'teachersDiscipline' ? TeachersDisciplinesGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'category' ? CategoriesGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'teachersDiscipline' ? TeachersDisciplinesGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Tests ? Tests[P] : never
  } 
    : Tests
  : Tests


  type TestsCountArgs = Merge<
    Omit<TestsFindManyArgs, 'select' | 'include'> & {
      select?: TestsCountAggregateInputType | true
    }
  >

  export interface TestsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tests that matches the filter.
     * @param {TestsFindUniqueArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TestsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TestsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tests'> extends True ? CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>> : CheckSelect<T, Prisma__TestsClient<Tests | null >, Prisma__TestsClient<TestsGetPayload<T> | null >>

    /**
     * Find the first Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsFindFirstArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TestsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TestsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tests'> extends True ? CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>> : CheckSelect<T, Prisma__TestsClient<Tests | null >, Prisma__TestsClient<TestsGetPayload<T> | null >>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.tests.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.tests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testsWithIdOnly = await prisma.tests.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TestsFindManyArgs>(
      args?: SelectSubset<T, TestsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tests>>, PrismaPromise<Array<TestsGetPayload<T>>>>

    /**
     * Create a Tests.
     * @param {TestsCreateArgs} args - Arguments to create a Tests.
     * @example
     * // Create one Tests
     * const Tests = await prisma.tests.create({
     *   data: {
     *     // ... data to create a Tests
     *   }
     * })
     * 
    **/
    create<T extends TestsCreateArgs>(
      args: SelectSubset<T, TestsCreateArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Create many Tests.
     *     @param {TestsCreateManyArgs} args - Arguments to create many Tests.
     *     @example
     *     // Create many Tests
     *     const tests = await prisma.tests.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TestsCreateManyArgs>(
      args?: SelectSubset<T, TestsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tests.
     * @param {TestsDeleteArgs} args - Arguments to delete one Tests.
     * @example
     * // Delete one Tests
     * const Tests = await prisma.tests.delete({
     *   where: {
     *     // ... filter to delete one Tests
     *   }
     * })
     * 
    **/
    delete<T extends TestsDeleteArgs>(
      args: SelectSubset<T, TestsDeleteArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Update one Tests.
     * @param {TestsUpdateArgs} args - Arguments to update one Tests.
     * @example
     * // Update one Tests
     * const tests = await prisma.tests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TestsUpdateArgs>(
      args: SelectSubset<T, TestsUpdateArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Delete zero or more Tests.
     * @param {TestsDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.tests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TestsDeleteManyArgs>(
      args?: SelectSubset<T, TestsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const tests = await prisma.tests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TestsUpdateManyArgs>(
      args: SelectSubset<T, TestsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tests.
     * @param {TestsUpsertArgs} args - Arguments to update or create a Tests.
     * @example
     * // Update or create a Tests
     * const tests = await prisma.tests.upsert({
     *   create: {
     *     // ... data to create a Tests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tests we want to update
     *   }
     * })
    **/
    upsert<T extends TestsUpsertArgs>(
      args: SelectSubset<T, TestsUpsertArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Find one Tests that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TestsFindUniqueOrThrowArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TestsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TestsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Find the first Tests that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsFindFirstOrThrowArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TestsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TestsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.tests.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestsCountArgs>(
      args?: Subset<T, TestsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestsAggregateArgs>(args: Subset<T, TestsAggregateArgs>): PrismaPromise<GetTestsAggregateType<T>>

    /**
     * Group by Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestsGroupByArgs['orderBy'] }
        : { orderBy?: TestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TestsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends CategoriesArgs = {}>(args?: Subset<T, CategoriesArgs>): CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>;

    teachersDiscipline<T extends TeachersDisciplinesArgs = {}>(args?: Subset<T, TeachersDisciplinesArgs>): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines | null >, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tests base type for findUnique actions
   */
  export type TestsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where: TestsWhereUniqueInput
  }

  /**
   * Tests: findUnique
   */
  export interface TestsFindUniqueArgs extends TestsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tests base type for findFirst actions
   */
  export type TestsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     * 
    **/
    distinct?: Enumerable<TestsScalarFieldEnum>
  }

  /**
   * Tests: findFirst
   */
  export interface TestsFindFirstArgs extends TestsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tests findMany
   */
  export type TestsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TestsScalarFieldEnum>
  }


  /**
   * Tests create
   */
  export type TestsCreateArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The data needed to create a Tests.
     * 
    **/
    data: XOR<TestsCreateInput, TestsUncheckedCreateInput>
  }


  /**
   * Tests createMany
   */
  export type TestsCreateManyArgs = {
    /**
     * The data used to create many Tests.
     * 
    **/
    data: Enumerable<TestsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tests update
   */
  export type TestsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The data needed to update a Tests.
     * 
    **/
    data: XOR<TestsUpdateInput, TestsUncheckedUpdateInput>
    /**
     * Choose, which Tests to update.
     * 
    **/
    where: TestsWhereUniqueInput
  }


  /**
   * Tests updateMany
   */
  export type TestsUpdateManyArgs = {
    /**
     * The data used to update Tests.
     * 
    **/
    data: XOR<TestsUpdateManyMutationInput, TestsUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     * 
    **/
    where?: TestsWhereInput
  }


  /**
   * Tests upsert
   */
  export type TestsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The filter to search for the Tests to update in case it exists.
     * 
    **/
    where: TestsWhereUniqueInput
    /**
     * In case the Tests found by the `where` argument doesn't exist, create a new Tests with this data.
     * 
    **/
    create: XOR<TestsCreateInput, TestsUncheckedCreateInput>
    /**
     * In case the Tests was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TestsUpdateInput, TestsUncheckedUpdateInput>
  }


  /**
   * Tests delete
   */
  export type TestsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter which Tests to delete.
     * 
    **/
    where: TestsWhereUniqueInput
  }


  /**
   * Tests deleteMany
   */
  export type TestsDeleteManyArgs = {
    /**
     * Filter which Tests to delete
     * 
    **/
    where?: TestsWhereInput
  }


  /**
   * Tests: findUniqueOrThrow
   */
  export type TestsFindUniqueOrThrowArgs = TestsFindUniqueArgsBase
      

  /**
   * Tests: findFirstOrThrow
   */
  export type TestsFindFirstOrThrowArgs = TestsFindFirstArgsBase
      

  /**
   * Tests without action
   */
  export type TestsArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
  }



  /**
   * Model TeachersDisciplines
   */


  export type AggregateTeachersDisciplines = {
    _count: TeachersDisciplinesCountAggregateOutputType | null
    _avg: TeachersDisciplinesAvgAggregateOutputType | null
    _sum: TeachersDisciplinesSumAggregateOutputType | null
    _min: TeachersDisciplinesMinAggregateOutputType | null
    _max: TeachersDisciplinesMaxAggregateOutputType | null
  }

  export type TeachersDisciplinesAvgAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesSumAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesMinAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesMaxAggregateOutputType = {
    id: number | null
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesCountAggregateOutputType = {
    id: number
    teacherId: number
    disciplineId: number
    _all: number
  }


  export type TeachersDisciplinesAvgAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesSumAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesMinAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesMaxAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesCountAggregateInputType = {
    id?: true
    teacherId?: true
    disciplineId?: true
    _all?: true
  }

  export type TeachersDisciplinesAggregateArgs = {
    /**
     * Filter which TeachersDisciplines to aggregate.
     * 
    **/
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersDisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeachersDisciplines
    **/
    _count?: true | TeachersDisciplinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersDisciplinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersDisciplinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersDisciplinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersDisciplinesMaxAggregateInputType
  }

  export type GetTeachersDisciplinesAggregateType<T extends TeachersDisciplinesAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachersDisciplines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachersDisciplines[P]>
      : GetScalarType<T[P], AggregateTeachersDisciplines[P]>
  }




  export type TeachersDisciplinesGroupByArgs = {
    where?: TeachersDisciplinesWhereInput
    orderBy?: Enumerable<TeachersDisciplinesOrderByWithAggregationInput>
    by: Array<TeachersDisciplinesScalarFieldEnum>
    having?: TeachersDisciplinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersDisciplinesCountAggregateInputType | true
    _avg?: TeachersDisciplinesAvgAggregateInputType
    _sum?: TeachersDisciplinesSumAggregateInputType
    _min?: TeachersDisciplinesMinAggregateInputType
    _max?: TeachersDisciplinesMaxAggregateInputType
  }


  export type TeachersDisciplinesGroupByOutputType = {
    id: number
    teacherId: number
    disciplineId: number
    _count: TeachersDisciplinesCountAggregateOutputType | null
    _avg: TeachersDisciplinesAvgAggregateOutputType | null
    _sum: TeachersDisciplinesSumAggregateOutputType | null
    _min: TeachersDisciplinesMinAggregateOutputType | null
    _max: TeachersDisciplinesMaxAggregateOutputType | null
  }

  type GetTeachersDisciplinesGroupByPayload<T extends TeachersDisciplinesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeachersDisciplinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersDisciplinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersDisciplinesGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersDisciplinesGroupByOutputType[P]>
        }
      >
    >


  export type TeachersDisciplinesSelect = {
    id?: boolean
    teacher?: boolean | TeachersArgs
    discipline?: boolean | DisciplinesArgs
    teacherId?: boolean
    disciplineId?: boolean
    Tests?: boolean | TestsFindManyArgs
    _count?: boolean | TeachersDisciplinesCountOutputTypeArgs
  }

  export type TeachersDisciplinesInclude = {
    teacher?: boolean | TeachersArgs
    discipline?: boolean | DisciplinesArgs
    Tests?: boolean | TestsFindManyArgs
    _count?: boolean | TeachersDisciplinesCountOutputTypeArgs
  }

  export type TeachersDisciplinesGetPayload<
    S extends boolean | null | undefined | TeachersDisciplinesArgs,
    U = keyof S
      > = S extends true
        ? TeachersDisciplines
    : S extends undefined
    ? never
    : S extends TeachersDisciplinesArgs | TeachersDisciplinesFindManyArgs
    ?'include' extends U
    ? TeachersDisciplines  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teacher' ? TeachersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'discipline' ? DisciplinesGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Tests' ? Array < TestsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TeachersDisciplinesCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teacher' ? TeachersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'discipline' ? DisciplinesGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Tests' ? Array < TestsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TeachersDisciplinesCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof TeachersDisciplines ? TeachersDisciplines[P] : never
  } 
    : TeachersDisciplines
  : TeachersDisciplines


  type TeachersDisciplinesCountArgs = Merge<
    Omit<TeachersDisciplinesFindManyArgs, 'select' | 'include'> & {
      select?: TeachersDisciplinesCountAggregateInputType | true
    }
  >

  export interface TeachersDisciplinesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TeachersDisciplines that matches the filter.
     * @param {TeachersDisciplinesFindUniqueArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeachersDisciplinesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeachersDisciplinesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TeachersDisciplines'> extends True ? CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>> : CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines | null >, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T> | null >>

    /**
     * Find the first TeachersDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindFirstArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeachersDisciplinesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeachersDisciplinesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TeachersDisciplines'> extends True ? CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>> : CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines | null >, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T> | null >>

    /**
     * Find zero or more TeachersDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findMany()
     * 
     * // Get first 10 TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teachersDisciplinesWithIdOnly = await prisma.teachersDisciplines.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeachersDisciplinesFindManyArgs>(
      args?: SelectSubset<T, TeachersDisciplinesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TeachersDisciplines>>, PrismaPromise<Array<TeachersDisciplinesGetPayload<T>>>>

    /**
     * Create a TeachersDisciplines.
     * @param {TeachersDisciplinesCreateArgs} args - Arguments to create a TeachersDisciplines.
     * @example
     * // Create one TeachersDisciplines
     * const TeachersDisciplines = await prisma.teachersDisciplines.create({
     *   data: {
     *     // ... data to create a TeachersDisciplines
     *   }
     * })
     * 
    **/
    create<T extends TeachersDisciplinesCreateArgs>(
      args: SelectSubset<T, TeachersDisciplinesCreateArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Create many TeachersDisciplines.
     *     @param {TeachersDisciplinesCreateManyArgs} args - Arguments to create many TeachersDisciplines.
     *     @example
     *     // Create many TeachersDisciplines
     *     const teachersDisciplines = await prisma.teachersDisciplines.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeachersDisciplinesCreateManyArgs>(
      args?: SelectSubset<T, TeachersDisciplinesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TeachersDisciplines.
     * @param {TeachersDisciplinesDeleteArgs} args - Arguments to delete one TeachersDisciplines.
     * @example
     * // Delete one TeachersDisciplines
     * const TeachersDisciplines = await prisma.teachersDisciplines.delete({
     *   where: {
     *     // ... filter to delete one TeachersDisciplines
     *   }
     * })
     * 
    **/
    delete<T extends TeachersDisciplinesDeleteArgs>(
      args: SelectSubset<T, TeachersDisciplinesDeleteArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Update one TeachersDisciplines.
     * @param {TeachersDisciplinesUpdateArgs} args - Arguments to update one TeachersDisciplines.
     * @example
     * // Update one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeachersDisciplinesUpdateArgs>(
      args: SelectSubset<T, TeachersDisciplinesUpdateArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Delete zero or more TeachersDisciplines.
     * @param {TeachersDisciplinesDeleteManyArgs} args - Arguments to filter TeachersDisciplines to delete.
     * @example
     * // Delete a few TeachersDisciplines
     * const { count } = await prisma.teachersDisciplines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeachersDisciplinesDeleteManyArgs>(
      args?: SelectSubset<T, TeachersDisciplinesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeachersDisciplinesUpdateManyArgs>(
      args: SelectSubset<T, TeachersDisciplinesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TeachersDisciplines.
     * @param {TeachersDisciplinesUpsertArgs} args - Arguments to update or create a TeachersDisciplines.
     * @example
     * // Update or create a TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.upsert({
     *   create: {
     *     // ... data to create a TeachersDisciplines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeachersDisciplines we want to update
     *   }
     * })
    **/
    upsert<T extends TeachersDisciplinesUpsertArgs>(
      args: SelectSubset<T, TeachersDisciplinesUpsertArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Find one TeachersDisciplines that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TeachersDisciplinesFindUniqueOrThrowArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeachersDisciplinesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TeachersDisciplinesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Find the first TeachersDisciplines that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindFirstOrThrowArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeachersDisciplinesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TeachersDisciplinesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TeachersDisciplinesClient<TeachersDisciplines>, Prisma__TeachersDisciplinesClient<TeachersDisciplinesGetPayload<T>>>

    /**
     * Count the number of TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesCountArgs} args - Arguments to filter TeachersDisciplines to count.
     * @example
     * // Count the number of TeachersDisciplines
     * const count = await prisma.teachersDisciplines.count({
     *   where: {
     *     // ... the filter for the TeachersDisciplines we want to count
     *   }
     * })
    **/
    count<T extends TeachersDisciplinesCountArgs>(
      args?: Subset<T, TeachersDisciplinesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersDisciplinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersDisciplinesAggregateArgs>(args: Subset<T, TeachersDisciplinesAggregateArgs>): PrismaPromise<GetTeachersDisciplinesAggregateType<T>>

    /**
     * Group by TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersDisciplinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersDisciplinesGroupByArgs['orderBy'] }
        : { orderBy?: TeachersDisciplinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersDisciplinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersDisciplinesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TeachersDisciplines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeachersDisciplinesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teacher<T extends TeachersArgs = {}>(args?: Subset<T, TeachersArgs>): CheckSelect<T, Prisma__TeachersClient<Teachers | null >, Prisma__TeachersClient<TeachersGetPayload<T> | null >>;

    discipline<T extends DisciplinesArgs = {}>(args?: Subset<T, DisciplinesArgs>): CheckSelect<T, Prisma__DisciplinesClient<Disciplines | null >, Prisma__DisciplinesClient<DisciplinesGetPayload<T> | null >>;

    Tests<T extends TestsFindManyArgs = {}>(args?: Subset<T, TestsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tests>>, PrismaPromise<Array<TestsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TeachersDisciplines base type for findUnique actions
   */
  export type TeachersDisciplinesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     * 
    **/
    where: TeachersDisciplinesWhereUniqueInput
  }

  /**
   * TeachersDisciplines: findUnique
   */
  export interface TeachersDisciplinesFindUniqueArgs extends TeachersDisciplinesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TeachersDisciplines base type for findFirst actions
   */
  export type TeachersDisciplinesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     * 
    **/
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersDisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersDisciplines.
     * 
    **/
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersDisciplines.
     * 
    **/
    distinct?: Enumerable<TeachersDisciplinesScalarFieldEnum>
  }

  /**
   * TeachersDisciplines: findFirst
   */
  export interface TeachersDisciplinesFindFirstArgs extends TeachersDisciplinesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TeachersDisciplines findMany
   */
  export type TeachersDisciplinesFindManyArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     * 
    **/
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersDisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeachersDisciplines.
     * 
    **/
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeachersDisciplinesScalarFieldEnum>
  }


  /**
   * TeachersDisciplines create
   */
  export type TeachersDisciplinesCreateArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * The data needed to create a TeachersDisciplines.
     * 
    **/
    data: XOR<TeachersDisciplinesCreateInput, TeachersDisciplinesUncheckedCreateInput>
  }


  /**
   * TeachersDisciplines createMany
   */
  export type TeachersDisciplinesCreateManyArgs = {
    /**
     * The data used to create many TeachersDisciplines.
     * 
    **/
    data: Enumerable<TeachersDisciplinesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TeachersDisciplines update
   */
  export type TeachersDisciplinesUpdateArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * The data needed to update a TeachersDisciplines.
     * 
    **/
    data: XOR<TeachersDisciplinesUpdateInput, TeachersDisciplinesUncheckedUpdateInput>
    /**
     * Choose, which TeachersDisciplines to update.
     * 
    **/
    where: TeachersDisciplinesWhereUniqueInput
  }


  /**
   * TeachersDisciplines updateMany
   */
  export type TeachersDisciplinesUpdateManyArgs = {
    /**
     * The data used to update TeachersDisciplines.
     * 
    **/
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which TeachersDisciplines to update
     * 
    **/
    where?: TeachersDisciplinesWhereInput
  }


  /**
   * TeachersDisciplines upsert
   */
  export type TeachersDisciplinesUpsertArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * The filter to search for the TeachersDisciplines to update in case it exists.
     * 
    **/
    where: TeachersDisciplinesWhereUniqueInput
    /**
     * In case the TeachersDisciplines found by the `where` argument doesn't exist, create a new TeachersDisciplines with this data.
     * 
    **/
    create: XOR<TeachersDisciplinesCreateInput, TeachersDisciplinesUncheckedCreateInput>
    /**
     * In case the TeachersDisciplines was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeachersDisciplinesUpdateInput, TeachersDisciplinesUncheckedUpdateInput>
  }


  /**
   * TeachersDisciplines delete
   */
  export type TeachersDisciplinesDeleteArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
    /**
     * Filter which TeachersDisciplines to delete.
     * 
    **/
    where: TeachersDisciplinesWhereUniqueInput
  }


  /**
   * TeachersDisciplines deleteMany
   */
  export type TeachersDisciplinesDeleteManyArgs = {
    /**
     * Filter which TeachersDisciplines to delete
     * 
    **/
    where?: TeachersDisciplinesWhereInput
  }


  /**
   * TeachersDisciplines: findUniqueOrThrow
   */
  export type TeachersDisciplinesFindUniqueOrThrowArgs = TeachersDisciplinesFindUniqueArgsBase
      

  /**
   * TeachersDisciplines: findFirstOrThrow
   */
  export type TeachersDisciplinesFindFirstOrThrowArgs = TeachersDisciplinesFindFirstArgsBase
      

  /**
   * TeachersDisciplines without action
   */
  export type TeachersDisciplinesArgs = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     * 
    **/
    select?: TeachersDisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersDisciplinesInclude | null
  }



  /**
   * Model Teachers
   */


  export type AggregateTeachers = {
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  export type TeachersAvgAggregateOutputType = {
    id: number | null
  }

  export type TeachersSumAggregateOutputType = {
    id: number | null
  }

  export type TeachersMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeachersMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TeachersCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TeachersAvgAggregateInputType = {
    id?: true
  }

  export type TeachersSumAggregateInputType = {
    id?: true
  }

  export type TeachersMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeachersMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TeachersCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TeachersAggregateArgs = {
    /**
     * Filter which Teachers to aggregate.
     * 
    **/
    where?: TeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersMaxAggregateInputType
  }

  export type GetTeachersAggregateType<T extends TeachersAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachers[P]>
      : GetScalarType<T[P], AggregateTeachers[P]>
  }




  export type TeachersGroupByArgs = {
    where?: TeachersWhereInput
    orderBy?: Enumerable<TeachersOrderByWithAggregationInput>
    by: Array<TeachersScalarFieldEnum>
    having?: TeachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersCountAggregateInputType | true
    _avg?: TeachersAvgAggregateInputType
    _sum?: TeachersSumAggregateInputType
    _min?: TeachersMinAggregateInputType
    _max?: TeachersMaxAggregateInputType
  }


  export type TeachersGroupByOutputType = {
    id: number
    name: string
    _count: TeachersCountAggregateOutputType | null
    _avg: TeachersAvgAggregateOutputType | null
    _sum: TeachersSumAggregateOutputType | null
    _min: TeachersMinAggregateOutputType | null
    _max: TeachersMaxAggregateOutputType | null
  }

  type GetTeachersGroupByPayload<T extends TeachersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersGroupByOutputType[P]>
        }
      >
    >


  export type TeachersSelect = {
    id?: boolean
    name?: boolean
    TeachersDisciplines?: boolean | TeachersDisciplinesFindManyArgs
    _count?: boolean | TeachersCountOutputTypeArgs
  }

  export type TeachersInclude = {
    TeachersDisciplines?: boolean | TeachersDisciplinesFindManyArgs
    _count?: boolean | TeachersCountOutputTypeArgs
  }

  export type TeachersGetPayload<
    S extends boolean | null | undefined | TeachersArgs,
    U = keyof S
      > = S extends true
        ? Teachers
    : S extends undefined
    ? never
    : S extends TeachersArgs | TeachersFindManyArgs
    ?'include' extends U
    ? Teachers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'TeachersDisciplines' ? Array < TeachersDisciplinesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TeachersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'TeachersDisciplines' ? Array < TeachersDisciplinesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TeachersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Teachers ? Teachers[P] : never
  } 
    : Teachers
  : Teachers


  type TeachersCountArgs = Merge<
    Omit<TeachersFindManyArgs, 'select' | 'include'> & {
      select?: TeachersCountAggregateInputType | true
    }
  >

  export interface TeachersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Teachers that matches the filter.
     * @param {TeachersFindUniqueArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeachersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeachersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Teachers'> extends True ? CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>> : CheckSelect<T, Prisma__TeachersClient<Teachers | null >, Prisma__TeachersClient<TeachersGetPayload<T> | null >>

    /**
     * Find the first Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersFindFirstArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeachersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeachersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Teachers'> extends True ? CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>> : CheckSelect<T, Prisma__TeachersClient<Teachers | null >, Prisma__TeachersClient<TeachersGetPayload<T> | null >>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teachers.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teachers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teachersWithIdOnly = await prisma.teachers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeachersFindManyArgs>(
      args?: SelectSubset<T, TeachersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Teachers>>, PrismaPromise<Array<TeachersGetPayload<T>>>>

    /**
     * Create a Teachers.
     * @param {TeachersCreateArgs} args - Arguments to create a Teachers.
     * @example
     * // Create one Teachers
     * const Teachers = await prisma.teachers.create({
     *   data: {
     *     // ... data to create a Teachers
     *   }
     * })
     * 
    **/
    create<T extends TeachersCreateArgs>(
      args: SelectSubset<T, TeachersCreateArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Create many Teachers.
     *     @param {TeachersCreateManyArgs} args - Arguments to create many Teachers.
     *     @example
     *     // Create many Teachers
     *     const teachers = await prisma.teachers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeachersCreateManyArgs>(
      args?: SelectSubset<T, TeachersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Teachers.
     * @param {TeachersDeleteArgs} args - Arguments to delete one Teachers.
     * @example
     * // Delete one Teachers
     * const Teachers = await prisma.teachers.delete({
     *   where: {
     *     // ... filter to delete one Teachers
     *   }
     * })
     * 
    **/
    delete<T extends TeachersDeleteArgs>(
      args: SelectSubset<T, TeachersDeleteArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Update one Teachers.
     * @param {TeachersUpdateArgs} args - Arguments to update one Teachers.
     * @example
     * // Update one Teachers
     * const teachers = await prisma.teachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeachersUpdateArgs>(
      args: SelectSubset<T, TeachersUpdateArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Delete zero or more Teachers.
     * @param {TeachersDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeachersDeleteManyArgs>(
      args?: SelectSubset<T, TeachersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teachers = await prisma.teachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeachersUpdateManyArgs>(
      args: SelectSubset<T, TeachersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Teachers.
     * @param {TeachersUpsertArgs} args - Arguments to update or create a Teachers.
     * @example
     * // Update or create a Teachers
     * const teachers = await prisma.teachers.upsert({
     *   create: {
     *     // ... data to create a Teachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teachers we want to update
     *   }
     * })
    **/
    upsert<T extends TeachersUpsertArgs>(
      args: SelectSubset<T, TeachersUpsertArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Find one Teachers that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TeachersFindUniqueOrThrowArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeachersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TeachersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Find the first Teachers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersFindFirstOrThrowArgs} args - Arguments to find a Teachers
     * @example
     * // Get one Teachers
     * const teachers = await prisma.teachers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeachersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TeachersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TeachersClient<Teachers>, Prisma__TeachersClient<TeachersGetPayload<T>>>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teachers.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeachersCountArgs>(
      args?: Subset<T, TeachersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersAggregateArgs>(args: Subset<T, TeachersAggregateArgs>): PrismaPromise<GetTeachersAggregateType<T>>

    /**
     * Group by Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersGroupByArgs['orderBy'] }
        : { orderBy?: TeachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Teachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeachersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    TeachersDisciplines<T extends TeachersDisciplinesFindManyArgs = {}>(args?: Subset<T, TeachersDisciplinesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeachersDisciplines>>, PrismaPromise<Array<TeachersDisciplinesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Teachers base type for findUnique actions
   */
  export type TeachersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * Filter, which Teachers to fetch.
     * 
    **/
    where: TeachersWhereUniqueInput
  }

  /**
   * Teachers: findUnique
   */
  export interface TeachersFindUniqueArgs extends TeachersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Teachers base type for findFirst actions
   */
  export type TeachersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * Filter, which Teachers to fetch.
     * 
    **/
    where?: TeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     * 
    **/
    cursor?: TeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     * 
    **/
    distinct?: Enumerable<TeachersScalarFieldEnum>
  }

  /**
   * Teachers: findFirst
   */
  export interface TeachersFindFirstArgs extends TeachersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Teachers findMany
   */
  export type TeachersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * Filter, which Teachers to fetch.
     * 
    **/
    where?: TeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     * 
    **/
    cursor?: TeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeachersScalarFieldEnum>
  }


  /**
   * Teachers create
   */
  export type TeachersCreateArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * The data needed to create a Teachers.
     * 
    **/
    data: XOR<TeachersCreateInput, TeachersUncheckedCreateInput>
  }


  /**
   * Teachers createMany
   */
  export type TeachersCreateManyArgs = {
    /**
     * The data used to create many Teachers.
     * 
    **/
    data: Enumerable<TeachersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Teachers update
   */
  export type TeachersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * The data needed to update a Teachers.
     * 
    **/
    data: XOR<TeachersUpdateInput, TeachersUncheckedUpdateInput>
    /**
     * Choose, which Teachers to update.
     * 
    **/
    where: TeachersWhereUniqueInput
  }


  /**
   * Teachers updateMany
   */
  export type TeachersUpdateManyArgs = {
    /**
     * The data used to update Teachers.
     * 
    **/
    data: XOR<TeachersUpdateManyMutationInput, TeachersUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     * 
    **/
    where?: TeachersWhereInput
  }


  /**
   * Teachers upsert
   */
  export type TeachersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * The filter to search for the Teachers to update in case it exists.
     * 
    **/
    where: TeachersWhereUniqueInput
    /**
     * In case the Teachers found by the `where` argument doesn't exist, create a new Teachers with this data.
     * 
    **/
    create: XOR<TeachersCreateInput, TeachersUncheckedCreateInput>
    /**
     * In case the Teachers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeachersUpdateInput, TeachersUncheckedUpdateInput>
  }


  /**
   * Teachers delete
   */
  export type TeachersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
    /**
     * Filter which Teachers to delete.
     * 
    **/
    where: TeachersWhereUniqueInput
  }


  /**
   * Teachers deleteMany
   */
  export type TeachersDeleteManyArgs = {
    /**
     * Filter which Teachers to delete
     * 
    **/
    where?: TeachersWhereInput
  }


  /**
   * Teachers: findUniqueOrThrow
   */
  export type TeachersFindUniqueOrThrowArgs = TeachersFindUniqueArgsBase
      

  /**
   * Teachers: findFirstOrThrow
   */
  export type TeachersFindFirstOrThrowArgs = TeachersFindFirstArgsBase
      

  /**
   * Teachers without action
   */
  export type TeachersArgs = {
    /**
     * Select specific fields to fetch from the Teachers
     * 
    **/
    select?: TeachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeachersInclude | null
  }



  /**
   * Model Disciplines
   */


  export type AggregateDisciplines = {
    _count: DisciplinesCountAggregateOutputType | null
    _avg: DisciplinesAvgAggregateOutputType | null
    _sum: DisciplinesSumAggregateOutputType | null
    _min: DisciplinesMinAggregateOutputType | null
    _max: DisciplinesMaxAggregateOutputType | null
  }

  export type DisciplinesAvgAggregateOutputType = {
    id: number | null
    termId: number | null
  }

  export type DisciplinesSumAggregateOutputType = {
    id: number | null
    termId: number | null
  }

  export type DisciplinesMinAggregateOutputType = {
    id: number | null
    name: string | null
    termId: number | null
  }

  export type DisciplinesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    termId: number | null
  }

  export type DisciplinesCountAggregateOutputType = {
    id: number
    name: number
    termId: number
    _all: number
  }


  export type DisciplinesAvgAggregateInputType = {
    id?: true
    termId?: true
  }

  export type DisciplinesSumAggregateInputType = {
    id?: true
    termId?: true
  }

  export type DisciplinesMinAggregateInputType = {
    id?: true
    name?: true
    termId?: true
  }

  export type DisciplinesMaxAggregateInputType = {
    id?: true
    name?: true
    termId?: true
  }

  export type DisciplinesCountAggregateInputType = {
    id?: true
    name?: true
    termId?: true
    _all?: true
  }

  export type DisciplinesAggregateArgs = {
    /**
     * Filter which Disciplines to aggregate.
     * 
    **/
    where?: DisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplinesMaxAggregateInputType
  }

  export type GetDisciplinesAggregateType<T extends DisciplinesAggregateArgs> = {
        [P in keyof T & keyof AggregateDisciplines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisciplines[P]>
      : GetScalarType<T[P], AggregateDisciplines[P]>
  }




  export type DisciplinesGroupByArgs = {
    where?: DisciplinesWhereInput
    orderBy?: Enumerable<DisciplinesOrderByWithAggregationInput>
    by: Array<DisciplinesScalarFieldEnum>
    having?: DisciplinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplinesCountAggregateInputType | true
    _avg?: DisciplinesAvgAggregateInputType
    _sum?: DisciplinesSumAggregateInputType
    _min?: DisciplinesMinAggregateInputType
    _max?: DisciplinesMaxAggregateInputType
  }


  export type DisciplinesGroupByOutputType = {
    id: number
    name: string
    termId: number
    _count: DisciplinesCountAggregateOutputType | null
    _avg: DisciplinesAvgAggregateOutputType | null
    _sum: DisciplinesSumAggregateOutputType | null
    _min: DisciplinesMinAggregateOutputType | null
    _max: DisciplinesMaxAggregateOutputType | null
  }

  type GetDisciplinesGroupByPayload<T extends DisciplinesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DisciplinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplinesGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplinesGroupByOutputType[P]>
        }
      >
    >


  export type DisciplinesSelect = {
    id?: boolean
    name?: boolean
    term?: boolean | TermsArgs
    termId?: boolean
    TeachersDisciplines?: boolean | TeachersDisciplinesFindManyArgs
    _count?: boolean | DisciplinesCountOutputTypeArgs
  }

  export type DisciplinesInclude = {
    term?: boolean | TermsArgs
    TeachersDisciplines?: boolean | TeachersDisciplinesFindManyArgs
    _count?: boolean | DisciplinesCountOutputTypeArgs
  }

  export type DisciplinesGetPayload<
    S extends boolean | null | undefined | DisciplinesArgs,
    U = keyof S
      > = S extends true
        ? Disciplines
    : S extends undefined
    ? never
    : S extends DisciplinesArgs | DisciplinesFindManyArgs
    ?'include' extends U
    ? Disciplines  & {
    [P in TrueKeys<S['include']>]:
        P extends 'term' ? TermsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'TeachersDisciplines' ? Array < TeachersDisciplinesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? DisciplinesCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'term' ? TermsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'TeachersDisciplines' ? Array < TeachersDisciplinesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? DisciplinesCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Disciplines ? Disciplines[P] : never
  } 
    : Disciplines
  : Disciplines


  type DisciplinesCountArgs = Merge<
    Omit<DisciplinesFindManyArgs, 'select' | 'include'> & {
      select?: DisciplinesCountAggregateInputType | true
    }
  >

  export interface DisciplinesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Disciplines that matches the filter.
     * @param {DisciplinesFindUniqueArgs} args - Arguments to find a Disciplines
     * @example
     * // Get one Disciplines
     * const disciplines = await prisma.disciplines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisciplinesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DisciplinesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Disciplines'> extends True ? CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>> : CheckSelect<T, Prisma__DisciplinesClient<Disciplines | null >, Prisma__DisciplinesClient<DisciplinesGetPayload<T> | null >>

    /**
     * Find the first Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesFindFirstArgs} args - Arguments to find a Disciplines
     * @example
     * // Get one Disciplines
     * const disciplines = await prisma.disciplines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisciplinesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DisciplinesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Disciplines'> extends True ? CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>> : CheckSelect<T, Prisma__DisciplinesClient<Disciplines | null >, Prisma__DisciplinesClient<DisciplinesGetPayload<T> | null >>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.disciplines.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.disciplines.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplinesWithIdOnly = await prisma.disciplines.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisciplinesFindManyArgs>(
      args?: SelectSubset<T, DisciplinesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Disciplines>>, PrismaPromise<Array<DisciplinesGetPayload<T>>>>

    /**
     * Create a Disciplines.
     * @param {DisciplinesCreateArgs} args - Arguments to create a Disciplines.
     * @example
     * // Create one Disciplines
     * const Disciplines = await prisma.disciplines.create({
     *   data: {
     *     // ... data to create a Disciplines
     *   }
     * })
     * 
    **/
    create<T extends DisciplinesCreateArgs>(
      args: SelectSubset<T, DisciplinesCreateArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Create many Disciplines.
     *     @param {DisciplinesCreateManyArgs} args - Arguments to create many Disciplines.
     *     @example
     *     // Create many Disciplines
     *     const disciplines = await prisma.disciplines.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisciplinesCreateManyArgs>(
      args?: SelectSubset<T, DisciplinesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Disciplines.
     * @param {DisciplinesDeleteArgs} args - Arguments to delete one Disciplines.
     * @example
     * // Delete one Disciplines
     * const Disciplines = await prisma.disciplines.delete({
     *   where: {
     *     // ... filter to delete one Disciplines
     *   }
     * })
     * 
    **/
    delete<T extends DisciplinesDeleteArgs>(
      args: SelectSubset<T, DisciplinesDeleteArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Update one Disciplines.
     * @param {DisciplinesUpdateArgs} args - Arguments to update one Disciplines.
     * @example
     * // Update one Disciplines
     * const disciplines = await prisma.disciplines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisciplinesUpdateArgs>(
      args: SelectSubset<T, DisciplinesUpdateArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplinesDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.disciplines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisciplinesDeleteManyArgs>(
      args?: SelectSubset<T, DisciplinesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const disciplines = await prisma.disciplines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisciplinesUpdateManyArgs>(
      args: SelectSubset<T, DisciplinesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Disciplines.
     * @param {DisciplinesUpsertArgs} args - Arguments to update or create a Disciplines.
     * @example
     * // Update or create a Disciplines
     * const disciplines = await prisma.disciplines.upsert({
     *   create: {
     *     // ... data to create a Disciplines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disciplines we want to update
     *   }
     * })
    **/
    upsert<T extends DisciplinesUpsertArgs>(
      args: SelectSubset<T, DisciplinesUpsertArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Find one Disciplines that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DisciplinesFindUniqueOrThrowArgs} args - Arguments to find a Disciplines
     * @example
     * // Get one Disciplines
     * const disciplines = await prisma.disciplines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisciplinesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DisciplinesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Find the first Disciplines that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesFindFirstOrThrowArgs} args - Arguments to find a Disciplines
     * @example
     * // Get one Disciplines
     * const disciplines = await prisma.disciplines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisciplinesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DisciplinesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DisciplinesClient<Disciplines>, Prisma__DisciplinesClient<DisciplinesGetPayload<T>>>

    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.disciplines.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplinesCountArgs>(
      args?: Subset<T, DisciplinesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplinesAggregateArgs>(args: Subset<T, DisciplinesAggregateArgs>): PrismaPromise<GetDisciplinesAggregateType<T>>

    /**
     * Group by Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplinesGroupByArgs['orderBy'] }
        : { orderBy?: DisciplinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplinesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Disciplines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DisciplinesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    term<T extends TermsArgs = {}>(args?: Subset<T, TermsArgs>): CheckSelect<T, Prisma__TermsClient<Terms | null >, Prisma__TermsClient<TermsGetPayload<T> | null >>;

    TeachersDisciplines<T extends TeachersDisciplinesFindManyArgs = {}>(args?: Subset<T, TeachersDisciplinesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeachersDisciplines>>, PrismaPromise<Array<TeachersDisciplinesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Disciplines base type for findUnique actions
   */
  export type DisciplinesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * Filter, which Disciplines to fetch.
     * 
    **/
    where: DisciplinesWhereUniqueInput
  }

  /**
   * Disciplines: findUnique
   */
  export interface DisciplinesFindUniqueArgs extends DisciplinesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disciplines base type for findFirst actions
   */
  export type DisciplinesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * Filter, which Disciplines to fetch.
     * 
    **/
    where?: DisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     * 
    **/
    cursor?: DisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     * 
    **/
    distinct?: Enumerable<DisciplinesScalarFieldEnum>
  }

  /**
   * Disciplines: findFirst
   */
  export interface DisciplinesFindFirstArgs extends DisciplinesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disciplines findMany
   */
  export type DisciplinesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * Filter, which Disciplines to fetch.
     * 
    **/
    where?: DisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     * 
    **/
    orderBy?: Enumerable<DisciplinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     * 
    **/
    cursor?: DisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DisciplinesScalarFieldEnum>
  }


  /**
   * Disciplines create
   */
  export type DisciplinesCreateArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * The data needed to create a Disciplines.
     * 
    **/
    data: XOR<DisciplinesCreateInput, DisciplinesUncheckedCreateInput>
  }


  /**
   * Disciplines createMany
   */
  export type DisciplinesCreateManyArgs = {
    /**
     * The data used to create many Disciplines.
     * 
    **/
    data: Enumerable<DisciplinesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Disciplines update
   */
  export type DisciplinesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * The data needed to update a Disciplines.
     * 
    **/
    data: XOR<DisciplinesUpdateInput, DisciplinesUncheckedUpdateInput>
    /**
     * Choose, which Disciplines to update.
     * 
    **/
    where: DisciplinesWhereUniqueInput
  }


  /**
   * Disciplines updateMany
   */
  export type DisciplinesUpdateManyArgs = {
    /**
     * The data used to update Disciplines.
     * 
    **/
    data: XOR<DisciplinesUpdateManyMutationInput, DisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     * 
    **/
    where?: DisciplinesWhereInput
  }


  /**
   * Disciplines upsert
   */
  export type DisciplinesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * The filter to search for the Disciplines to update in case it exists.
     * 
    **/
    where: DisciplinesWhereUniqueInput
    /**
     * In case the Disciplines found by the `where` argument doesn't exist, create a new Disciplines with this data.
     * 
    **/
    create: XOR<DisciplinesCreateInput, DisciplinesUncheckedCreateInput>
    /**
     * In case the Disciplines was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DisciplinesUpdateInput, DisciplinesUncheckedUpdateInput>
  }


  /**
   * Disciplines delete
   */
  export type DisciplinesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
    /**
     * Filter which Disciplines to delete.
     * 
    **/
    where: DisciplinesWhereUniqueInput
  }


  /**
   * Disciplines deleteMany
   */
  export type DisciplinesDeleteManyArgs = {
    /**
     * Filter which Disciplines to delete
     * 
    **/
    where?: DisciplinesWhereInput
  }


  /**
   * Disciplines: findUniqueOrThrow
   */
  export type DisciplinesFindUniqueOrThrowArgs = DisciplinesFindUniqueArgsBase
      

  /**
   * Disciplines: findFirstOrThrow
   */
  export type DisciplinesFindFirstOrThrowArgs = DisciplinesFindFirstArgsBase
      

  /**
   * Disciplines without action
   */
  export type DisciplinesArgs = {
    /**
     * Select specific fields to fetch from the Disciplines
     * 
    **/
    select?: DisciplinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DisciplinesInclude | null
  }



  /**
   * Model Terms
   */


  export type AggregateTerms = {
    _count: TermsCountAggregateOutputType | null
    _avg: TermsAvgAggregateOutputType | null
    _sum: TermsSumAggregateOutputType | null
    _min: TermsMinAggregateOutputType | null
    _max: TermsMaxAggregateOutputType | null
  }

  export type TermsAvgAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TermsSumAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TermsMinAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TermsMaxAggregateOutputType = {
    id: number | null
    number: number | null
  }

  export type TermsCountAggregateOutputType = {
    id: number
    number: number
    _all: number
  }


  export type TermsAvgAggregateInputType = {
    id?: true
    number?: true
  }

  export type TermsSumAggregateInputType = {
    id?: true
    number?: true
  }

  export type TermsMinAggregateInputType = {
    id?: true
    number?: true
  }

  export type TermsMaxAggregateInputType = {
    id?: true
    number?: true
  }

  export type TermsCountAggregateInputType = {
    id?: true
    number?: true
    _all?: true
  }

  export type TermsAggregateArgs = {
    /**
     * Filter which Terms to aggregate.
     * 
    **/
    where?: TermsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TermsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermsMaxAggregateInputType
  }

  export type GetTermsAggregateType<T extends TermsAggregateArgs> = {
        [P in keyof T & keyof AggregateTerms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerms[P]>
      : GetScalarType<T[P], AggregateTerms[P]>
  }




  export type TermsGroupByArgs = {
    where?: TermsWhereInput
    orderBy?: Enumerable<TermsOrderByWithAggregationInput>
    by: Array<TermsScalarFieldEnum>
    having?: TermsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermsCountAggregateInputType | true
    _avg?: TermsAvgAggregateInputType
    _sum?: TermsSumAggregateInputType
    _min?: TermsMinAggregateInputType
    _max?: TermsMaxAggregateInputType
  }


  export type TermsGroupByOutputType = {
    id: number
    number: number
    _count: TermsCountAggregateOutputType | null
    _avg: TermsAvgAggregateOutputType | null
    _sum: TermsSumAggregateOutputType | null
    _min: TermsMinAggregateOutputType | null
    _max: TermsMaxAggregateOutputType | null
  }

  type GetTermsGroupByPayload<T extends TermsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TermsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermsGroupByOutputType[P]>
            : GetScalarType<T[P], TermsGroupByOutputType[P]>
        }
      >
    >


  export type TermsSelect = {
    id?: boolean
    number?: boolean
    Disciplines?: boolean | DisciplinesFindManyArgs
    _count?: boolean | TermsCountOutputTypeArgs
  }

  export type TermsInclude = {
    Disciplines?: boolean | DisciplinesFindManyArgs
    _count?: boolean | TermsCountOutputTypeArgs
  }

  export type TermsGetPayload<
    S extends boolean | null | undefined | TermsArgs,
    U = keyof S
      > = S extends true
        ? Terms
    : S extends undefined
    ? never
    : S extends TermsArgs | TermsFindManyArgs
    ?'include' extends U
    ? Terms  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Disciplines' ? Array < DisciplinesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TermsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Disciplines' ? Array < DisciplinesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TermsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Terms ? Terms[P] : never
  } 
    : Terms
  : Terms


  type TermsCountArgs = Merge<
    Omit<TermsFindManyArgs, 'select' | 'include'> & {
      select?: TermsCountAggregateInputType | true
    }
  >

  export interface TermsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Terms that matches the filter.
     * @param {TermsFindUniqueArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TermsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TermsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Terms'> extends True ? CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>> : CheckSelect<T, Prisma__TermsClient<Terms | null >, Prisma__TermsClient<TermsGetPayload<T> | null >>

    /**
     * Find the first Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsFindFirstArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TermsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TermsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Terms'> extends True ? CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>> : CheckSelect<T, Prisma__TermsClient<Terms | null >, Prisma__TermsClient<TermsGetPayload<T> | null >>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.terms.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.terms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termsWithIdOnly = await prisma.terms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TermsFindManyArgs>(
      args?: SelectSubset<T, TermsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Terms>>, PrismaPromise<Array<TermsGetPayload<T>>>>

    /**
     * Create a Terms.
     * @param {TermsCreateArgs} args - Arguments to create a Terms.
     * @example
     * // Create one Terms
     * const Terms = await prisma.terms.create({
     *   data: {
     *     // ... data to create a Terms
     *   }
     * })
     * 
    **/
    create<T extends TermsCreateArgs>(
      args: SelectSubset<T, TermsCreateArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Create many Terms.
     *     @param {TermsCreateManyArgs} args - Arguments to create many Terms.
     *     @example
     *     // Create many Terms
     *     const terms = await prisma.terms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TermsCreateManyArgs>(
      args?: SelectSubset<T, TermsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Terms.
     * @param {TermsDeleteArgs} args - Arguments to delete one Terms.
     * @example
     * // Delete one Terms
     * const Terms = await prisma.terms.delete({
     *   where: {
     *     // ... filter to delete one Terms
     *   }
     * })
     * 
    **/
    delete<T extends TermsDeleteArgs>(
      args: SelectSubset<T, TermsDeleteArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Update one Terms.
     * @param {TermsUpdateArgs} args - Arguments to update one Terms.
     * @example
     * // Update one Terms
     * const terms = await prisma.terms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TermsUpdateArgs>(
      args: SelectSubset<T, TermsUpdateArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Delete zero or more Terms.
     * @param {TermsDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.terms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TermsDeleteManyArgs>(
      args?: SelectSubset<T, TermsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const terms = await prisma.terms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TermsUpdateManyArgs>(
      args: SelectSubset<T, TermsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Terms.
     * @param {TermsUpsertArgs} args - Arguments to update or create a Terms.
     * @example
     * // Update or create a Terms
     * const terms = await prisma.terms.upsert({
     *   create: {
     *     // ... data to create a Terms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Terms we want to update
     *   }
     * })
    **/
    upsert<T extends TermsUpsertArgs>(
      args: SelectSubset<T, TermsUpsertArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Find one Terms that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TermsFindUniqueOrThrowArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TermsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TermsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Find the first Terms that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsFindFirstOrThrowArgs} args - Arguments to find a Terms
     * @example
     * // Get one Terms
     * const terms = await prisma.terms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TermsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TermsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TermsClient<Terms>, Prisma__TermsClient<TermsGetPayload<T>>>

    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.terms.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermsCountArgs>(
      args?: Subset<T, TermsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermsAggregateArgs>(args: Subset<T, TermsAggregateArgs>): PrismaPromise<GetTermsAggregateType<T>>

    /**
     * Group by Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermsGroupByArgs['orderBy'] }
        : { orderBy?: TermsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Terms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TermsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Disciplines<T extends DisciplinesFindManyArgs = {}>(args?: Subset<T, DisciplinesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Disciplines>>, PrismaPromise<Array<DisciplinesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Terms base type for findUnique actions
   */
  export type TermsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * Filter, which Terms to fetch.
     * 
    **/
    where: TermsWhereUniqueInput
  }

  /**
   * Terms: findUnique
   */
  export interface TermsFindUniqueArgs extends TermsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Terms base type for findFirst actions
   */
  export type TermsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * Filter, which Terms to fetch.
     * 
    **/
    where?: TermsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     * 
    **/
    cursor?: TermsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     * 
    **/
    distinct?: Enumerable<TermsScalarFieldEnum>
  }

  /**
   * Terms: findFirst
   */
  export interface TermsFindFirstArgs extends TermsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Terms findMany
   */
  export type TermsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * Filter, which Terms to fetch.
     * 
    **/
    where?: TermsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     * 
    **/
    cursor?: TermsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TermsScalarFieldEnum>
  }


  /**
   * Terms create
   */
  export type TermsCreateArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * The data needed to create a Terms.
     * 
    **/
    data: XOR<TermsCreateInput, TermsUncheckedCreateInput>
  }


  /**
   * Terms createMany
   */
  export type TermsCreateManyArgs = {
    /**
     * The data used to create many Terms.
     * 
    **/
    data: Enumerable<TermsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Terms update
   */
  export type TermsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * The data needed to update a Terms.
     * 
    **/
    data: XOR<TermsUpdateInput, TermsUncheckedUpdateInput>
    /**
     * Choose, which Terms to update.
     * 
    **/
    where: TermsWhereUniqueInput
  }


  /**
   * Terms updateMany
   */
  export type TermsUpdateManyArgs = {
    /**
     * The data used to update Terms.
     * 
    **/
    data: XOR<TermsUpdateManyMutationInput, TermsUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     * 
    **/
    where?: TermsWhereInput
  }


  /**
   * Terms upsert
   */
  export type TermsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * The filter to search for the Terms to update in case it exists.
     * 
    **/
    where: TermsWhereUniqueInput
    /**
     * In case the Terms found by the `where` argument doesn't exist, create a new Terms with this data.
     * 
    **/
    create: XOR<TermsCreateInput, TermsUncheckedCreateInput>
    /**
     * In case the Terms was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TermsUpdateInput, TermsUncheckedUpdateInput>
  }


  /**
   * Terms delete
   */
  export type TermsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
    /**
     * Filter which Terms to delete.
     * 
    **/
    where: TermsWhereUniqueInput
  }


  /**
   * Terms deleteMany
   */
  export type TermsDeleteManyArgs = {
    /**
     * Filter which Terms to delete
     * 
    **/
    where?: TermsWhereInput
  }


  /**
   * Terms: findUniqueOrThrow
   */
  export type TermsFindUniqueOrThrowArgs = TermsFindUniqueArgsBase
      

  /**
   * Terms: findFirstOrThrow
   */
  export type TermsFindFirstOrThrowArgs = TermsFindFirstArgsBase
      

  /**
   * Terms without action
   */
  export type TermsArgs = {
    /**
     * Select specific fields to fetch from the Terms
     * 
    **/
    select?: TermsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const DisciplinesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    termId: 'termId'
  };

  export type DisciplinesScalarFieldEnum = (typeof DisciplinesScalarFieldEnum)[keyof typeof DisciplinesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TeachersDisciplinesScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    disciplineId: 'disciplineId'
  };

  export type TeachersDisciplinesScalarFieldEnum = (typeof TeachersDisciplinesScalarFieldEnum)[keyof typeof TeachersDisciplinesScalarFieldEnum]


  export const TeachersScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TeachersScalarFieldEnum = (typeof TeachersScalarFieldEnum)[keyof typeof TeachersScalarFieldEnum]


  export const TermsScalarFieldEnum: {
    id: 'id',
    number: 'number'
  };

  export type TermsScalarFieldEnum = (typeof TermsScalarFieldEnum)[keyof typeof TermsScalarFieldEnum]


  export const TestsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pdfUrl: 'pdfUrl',
    categoryId: 'categoryId',
    teachersDisciplineId: 'teachersDisciplineId'
  };

  export type TestsScalarFieldEnum = (typeof TestsScalarFieldEnum)[keyof typeof TestsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type CategoriesWhereInput = {
    AND?: Enumerable<CategoriesWhereInput>
    OR?: Enumerable<CategoriesWhereInput>
    NOT?: Enumerable<CategoriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Tests?: TestsListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Tests?: TestsOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = {
    id?: number
  }

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _avg?: CategoriesAvgOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
    _sum?: CategoriesSumOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TestsWhereInput = {
    AND?: Enumerable<TestsWhereInput>
    OR?: Enumerable<TestsWhereInput>
    NOT?: Enumerable<TestsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    pdfUrl?: StringFilter | string
    category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    teachersDiscipline?: XOR<TeachersDisciplinesRelationFilter, TeachersDisciplinesWhereInput>
    categoryId?: IntFilter | number
    teachersDisciplineId?: IntFilter | number
  }

  export type TestsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    category?: CategoriesOrderByWithRelationInput
    teachersDiscipline?: TeachersDisciplinesOrderByWithRelationInput
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TestsWhereUniqueInput = {
    id?: number
  }

  export type TestsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
    _count?: TestsCountOrderByAggregateInput
    _avg?: TestsAvgOrderByAggregateInput
    _max?: TestsMaxOrderByAggregateInput
    _min?: TestsMinOrderByAggregateInput
    _sum?: TestsSumOrderByAggregateInput
  }

  export type TestsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TestsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TestsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TestsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    pdfUrl?: StringWithAggregatesFilter | string
    categoryId?: IntWithAggregatesFilter | number
    teachersDisciplineId?: IntWithAggregatesFilter | number
  }

  export type TeachersDisciplinesWhereInput = {
    AND?: Enumerable<TeachersDisciplinesWhereInput>
    OR?: Enumerable<TeachersDisciplinesWhereInput>
    NOT?: Enumerable<TeachersDisciplinesWhereInput>
    id?: IntFilter | number
    teacher?: XOR<TeachersRelationFilter, TeachersWhereInput>
    discipline?: XOR<DisciplinesRelationFilter, DisciplinesWhereInput>
    teacherId?: IntFilter | number
    disciplineId?: IntFilter | number
    Tests?: TestsListRelationFilter
  }

  export type TeachersDisciplinesOrderByWithRelationInput = {
    id?: SortOrder
    teacher?: TeachersOrderByWithRelationInput
    discipline?: DisciplinesOrderByWithRelationInput
    teacherId?: SortOrder
    disciplineId?: SortOrder
    Tests?: TestsOrderByRelationAggregateInput
  }

  export type TeachersDisciplinesWhereUniqueInput = {
    id?: number
  }

  export type TeachersDisciplinesOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
    _count?: TeachersDisciplinesCountOrderByAggregateInput
    _avg?: TeachersDisciplinesAvgOrderByAggregateInput
    _max?: TeachersDisciplinesMaxOrderByAggregateInput
    _min?: TeachersDisciplinesMinOrderByAggregateInput
    _sum?: TeachersDisciplinesSumOrderByAggregateInput
  }

  export type TeachersDisciplinesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeachersDisciplinesScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeachersDisciplinesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeachersDisciplinesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    teacherId?: IntWithAggregatesFilter | number
    disciplineId?: IntWithAggregatesFilter | number
  }

  export type TeachersWhereInput = {
    AND?: Enumerable<TeachersWhereInput>
    OR?: Enumerable<TeachersWhereInput>
    NOT?: Enumerable<TeachersWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    TeachersDisciplines?: TeachersDisciplinesListRelationFilter
  }

  export type TeachersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    TeachersDisciplines?: TeachersDisciplinesOrderByRelationAggregateInput
  }

  export type TeachersWhereUniqueInput = {
    id?: number
  }

  export type TeachersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TeachersCountOrderByAggregateInput
    _avg?: TeachersAvgOrderByAggregateInput
    _max?: TeachersMaxOrderByAggregateInput
    _min?: TeachersMinOrderByAggregateInput
    _sum?: TeachersSumOrderByAggregateInput
  }

  export type TeachersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeachersScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeachersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeachersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type DisciplinesWhereInput = {
    AND?: Enumerable<DisciplinesWhereInput>
    OR?: Enumerable<DisciplinesWhereInput>
    NOT?: Enumerable<DisciplinesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    term?: XOR<TermsRelationFilter, TermsWhereInput>
    termId?: IntFilter | number
    TeachersDisciplines?: TeachersDisciplinesListRelationFilter
  }

  export type DisciplinesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    term?: TermsOrderByWithRelationInput
    termId?: SortOrder
    TeachersDisciplines?: TeachersDisciplinesOrderByRelationAggregateInput
  }

  export type DisciplinesWhereUniqueInput = {
    id?: number
  }

  export type DisciplinesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    termId?: SortOrder
    _count?: DisciplinesCountOrderByAggregateInput
    _avg?: DisciplinesAvgOrderByAggregateInput
    _max?: DisciplinesMaxOrderByAggregateInput
    _min?: DisciplinesMinOrderByAggregateInput
    _sum?: DisciplinesSumOrderByAggregateInput
  }

  export type DisciplinesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DisciplinesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DisciplinesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DisciplinesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    termId?: IntWithAggregatesFilter | number
  }

  export type TermsWhereInput = {
    AND?: Enumerable<TermsWhereInput>
    OR?: Enumerable<TermsWhereInput>
    NOT?: Enumerable<TermsWhereInput>
    id?: IntFilter | number
    number?: IntFilter | number
    Disciplines?: DisciplinesListRelationFilter
  }

  export type TermsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    Disciplines?: DisciplinesOrderByRelationAggregateInput
  }

  export type TermsWhereUniqueInput = {
    id?: number
  }

  export type TermsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    _count?: TermsCountOrderByAggregateInput
    _avg?: TermsAvgOrderByAggregateInput
    _max?: TermsMaxOrderByAggregateInput
    _min?: TermsMinOrderByAggregateInput
    _sum?: TermsSumOrderByAggregateInput
  }

  export type TermsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TermsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TermsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TermsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    number?: IntWithAggregatesFilter | number
  }

  export type UsersCreateInput = {
    email: string
    password: string
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesCreateInput = {
    name: string
    Tests?: TestsCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: number
    name: string
    Tests?: TestsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Tests?: TestsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Tests?: TestsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TestsCreateInput = {
    name: string
    pdfUrl: string
    category: CategoriesCreateNestedOneWithoutTestsInput
    teachersDiscipline: TeachersDisciplinesCreateNestedOneWithoutTestsInput
  }

  export type TestsUncheckedCreateInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
    teachersDisciplineId: number
  }

  export type TestsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    category?: CategoriesUpdateOneRequiredWithoutTestsNestedInput
    teachersDiscipline?: TeachersDisciplinesUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    teachersDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestsCreateManyInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
    teachersDisciplineId: number
  }

  export type TestsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TestsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    teachersDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateInput = {
    teacher: TeachersCreateNestedOneWithoutTeachersDisciplinesInput
    discipline: DisciplinesCreateNestedOneWithoutTeachersDisciplinesInput
    Tests?: TestsCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesUncheckedCreateInput = {
    id?: number
    teacherId: number
    disciplineId: number
    Tests?: TestsUncheckedCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesUpdateInput = {
    teacher?: TeachersUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
    discipline?: DisciplinesUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
    Tests?: TestsUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    Tests?: TestsUncheckedUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type TeachersDisciplinesCreateManyInput = {
    id?: number
    teacherId: number
    disciplineId: number
  }

  export type TeachersDisciplinesUpdateManyMutationInput = {

  }

  export type TeachersDisciplinesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCreateInput = {
    name: string
    TeachersDisciplines?: TeachersDisciplinesCreateNestedManyWithoutTeacherInput
  }

  export type TeachersUncheckedCreateInput = {
    id?: number
    name: string
    TeachersDisciplines?: TeachersDisciplinesUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeachersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    TeachersDisciplines?: TeachersDisciplinesUpdateManyWithoutTeacherNestedInput
  }

  export type TeachersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    TeachersDisciplines?: TeachersDisciplinesUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeachersCreateManyInput = {
    id?: number
    name: string
  }

  export type TeachersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinesCreateInput = {
    name: string
    term: TermsCreateNestedOneWithoutDisciplinesInput
    TeachersDisciplines?: TeachersDisciplinesCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplinesUncheckedCreateInput = {
    id?: number
    name: string
    termId: number
    TeachersDisciplines?: TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplinesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    term?: TermsUpdateOneRequiredWithoutDisciplinesNestedInput
    TeachersDisciplines?: TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplinesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    termId?: IntFieldUpdateOperationsInput | number
    TeachersDisciplines?: TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplinesCreateManyInput = {
    id?: number
    name: string
    termId: number
  }

  export type DisciplinesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    termId?: IntFieldUpdateOperationsInput | number
  }

  export type TermsCreateInput = {
    number: number
    Disciplines?: DisciplinesCreateNestedManyWithoutTermInput
  }

  export type TermsUncheckedCreateInput = {
    id?: number
    number: number
    Disciplines?: DisciplinesUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermsUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    Disciplines?: DisciplinesUpdateManyWithoutTermNestedInput
  }

  export type TermsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    Disciplines?: DisciplinesUncheckedUpdateManyWithoutTermNestedInput
  }

  export type TermsCreateManyInput = {
    id?: number
    number: number
  }

  export type TermsUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
  }

  export type TermsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TestsListRelationFilter = {
    every?: TestsWhereInput
    some?: TestsWhereInput
    none?: TestsWhereInput
  }

  export type TestsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesRelationFilter = {
    is?: CategoriesWhereInput
    isNot?: CategoriesWhereInput
  }

  export type TeachersDisciplinesRelationFilter = {
    is?: TeachersDisciplinesWhereInput
    isNot?: TeachersDisciplinesWhereInput
  }

  export type TestsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TestsAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TestsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TestsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pdfUrl?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TestsSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    teachersDisciplineId?: SortOrder
  }

  export type TeachersRelationFilter = {
    is?: TeachersWhereInput
    isNot?: TeachersWhereInput
  }

  export type DisciplinesRelationFilter = {
    is?: DisciplinesWhereInput
    isNot?: DisciplinesWhereInput
  }

  export type TeachersDisciplinesCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesAvgOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesSumOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesListRelationFilter = {
    every?: TeachersDisciplinesWhereInput
    some?: TeachersDisciplinesWhereInput
    none?: TeachersDisciplinesWhereInput
  }

  export type TeachersDisciplinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeachersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeachersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeachersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeachersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TeachersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TermsRelationFilter = {
    is?: TermsWhereInput
    isNot?: TermsWhereInput
  }

  export type DisciplinesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    termId?: SortOrder
  }

  export type DisciplinesAvgOrderByAggregateInput = {
    id?: SortOrder
    termId?: SortOrder
  }

  export type DisciplinesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    termId?: SortOrder
  }

  export type DisciplinesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    termId?: SortOrder
  }

  export type DisciplinesSumOrderByAggregateInput = {
    id?: SortOrder
    termId?: SortOrder
  }

  export type DisciplinesListRelationFilter = {
    every?: DisciplinesWhereInput
    some?: DisciplinesWhereInput
    none?: DisciplinesWhereInput
  }

  export type DisciplinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TermsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type TermsAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type TermsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type TermsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type TermsSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestsCreateWithoutCategoryInput>, Enumerable<TestsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutCategoryInput>
    createMany?: TestsCreateManyCategoryInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type TestsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TestsCreateWithoutCategoryInput>, Enumerable<TestsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutCategoryInput>
    createMany?: TestsCreateManyCategoryInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type TestsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TestsCreateWithoutCategoryInput>, Enumerable<TestsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TestsCreateManyCategoryInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type TestsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TestsCreateWithoutCategoryInput>, Enumerable<TestsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TestsCreateManyCategoryInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type CategoriesCreateNestedOneWithoutTestsInput = {
    create?: XOR<CategoriesCreateWithoutTestsInput, CategoriesUncheckedCreateWithoutTestsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutTestsInput
    connect?: CategoriesWhereUniqueInput
  }

  export type TeachersDisciplinesCreateNestedOneWithoutTestsInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTestsInput, TeachersDisciplinesUncheckedCreateWithoutTestsInput>
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTestsInput
    connect?: TeachersDisciplinesWhereUniqueInput
  }

  export type CategoriesUpdateOneRequiredWithoutTestsNestedInput = {
    create?: XOR<CategoriesCreateWithoutTestsInput, CategoriesUncheckedCreateWithoutTestsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutTestsInput
    upsert?: CategoriesUpsertWithoutTestsInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<CategoriesUpdateWithoutTestsInput, CategoriesUncheckedUpdateWithoutTestsInput>
  }

  export type TeachersDisciplinesUpdateOneRequiredWithoutTestsNestedInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTestsInput, TeachersDisciplinesUncheckedCreateWithoutTestsInput>
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTestsInput
    upsert?: TeachersDisciplinesUpsertWithoutTestsInput
    connect?: TeachersDisciplinesWhereUniqueInput
    update?: XOR<TeachersDisciplinesUpdateWithoutTestsInput, TeachersDisciplinesUncheckedUpdateWithoutTestsInput>
  }

  export type TeachersCreateNestedOneWithoutTeachersDisciplinesInput = {
    create?: XOR<TeachersCreateWithoutTeachersDisciplinesInput, TeachersUncheckedCreateWithoutTeachersDisciplinesInput>
    connectOrCreate?: TeachersCreateOrConnectWithoutTeachersDisciplinesInput
    connect?: TeachersWhereUniqueInput
  }

  export type DisciplinesCreateNestedOneWithoutTeachersDisciplinesInput = {
    create?: XOR<DisciplinesCreateWithoutTeachersDisciplinesInput, DisciplinesUncheckedCreateWithoutTeachersDisciplinesInput>
    connectOrCreate?: DisciplinesCreateOrConnectWithoutTeachersDisciplinesInput
    connect?: DisciplinesWhereUniqueInput
  }

  export type TestsCreateNestedManyWithoutTeachersDisciplineInput = {
    create?: XOR<Enumerable<TestsCreateWithoutTeachersDisciplineInput>, Enumerable<TestsUncheckedCreateWithoutTeachersDisciplineInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutTeachersDisciplineInput>
    createMany?: TestsCreateManyTeachersDisciplineInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type TestsUncheckedCreateNestedManyWithoutTeachersDisciplineInput = {
    create?: XOR<Enumerable<TestsCreateWithoutTeachersDisciplineInput>, Enumerable<TestsUncheckedCreateWithoutTeachersDisciplineInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutTeachersDisciplineInput>
    createMany?: TestsCreateManyTeachersDisciplineInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type TeachersUpdateOneRequiredWithoutTeachersDisciplinesNestedInput = {
    create?: XOR<TeachersCreateWithoutTeachersDisciplinesInput, TeachersUncheckedCreateWithoutTeachersDisciplinesInput>
    connectOrCreate?: TeachersCreateOrConnectWithoutTeachersDisciplinesInput
    upsert?: TeachersUpsertWithoutTeachersDisciplinesInput
    connect?: TeachersWhereUniqueInput
    update?: XOR<TeachersUpdateWithoutTeachersDisciplinesInput, TeachersUncheckedUpdateWithoutTeachersDisciplinesInput>
  }

  export type DisciplinesUpdateOneRequiredWithoutTeachersDisciplinesNestedInput = {
    create?: XOR<DisciplinesCreateWithoutTeachersDisciplinesInput, DisciplinesUncheckedCreateWithoutTeachersDisciplinesInput>
    connectOrCreate?: DisciplinesCreateOrConnectWithoutTeachersDisciplinesInput
    upsert?: DisciplinesUpsertWithoutTeachersDisciplinesInput
    connect?: DisciplinesWhereUniqueInput
    update?: XOR<DisciplinesUpdateWithoutTeachersDisciplinesInput, DisciplinesUncheckedUpdateWithoutTeachersDisciplinesInput>
  }

  export type TestsUpdateManyWithoutTeachersDisciplineNestedInput = {
    create?: XOR<Enumerable<TestsCreateWithoutTeachersDisciplineInput>, Enumerable<TestsUncheckedCreateWithoutTeachersDisciplineInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutTeachersDisciplineInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutTeachersDisciplineInput>
    createMany?: TestsCreateManyTeachersDisciplineInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutTeachersDisciplineInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutTeachersDisciplineInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type TestsUncheckedUpdateManyWithoutTeachersDisciplineNestedInput = {
    create?: XOR<Enumerable<TestsCreateWithoutTeachersDisciplineInput>, Enumerable<TestsUncheckedCreateWithoutTeachersDisciplineInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutTeachersDisciplineInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutTeachersDisciplineInput>
    createMany?: TestsCreateManyTeachersDisciplineInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutTeachersDisciplineInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutTeachersDisciplineInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type TeachersDisciplinesCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutTeacherInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutTeacherInput>
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
  }

  export type TeachersDisciplinesUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutTeacherInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutTeacherInput>
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
  }

  export type TeachersDisciplinesUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutTeacherInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    set?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    disconnect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    delete?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    update?: Enumerable<TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<TeachersDisciplinesScalarWhereInput>
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutTeacherInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    set?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    disconnect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    delete?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    update?: Enumerable<TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<TeachersDisciplinesScalarWhereInput>
  }

  export type TermsCreateNestedOneWithoutDisciplinesInput = {
    create?: XOR<TermsCreateWithoutDisciplinesInput, TermsUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: TermsCreateOrConnectWithoutDisciplinesInput
    connect?: TermsWhereUniqueInput
  }

  export type TeachersDisciplinesCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutDisciplineInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutDisciplineInput>
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
  }

  export type TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutDisciplineInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutDisciplineInput>
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
  }

  export type TermsUpdateOneRequiredWithoutDisciplinesNestedInput = {
    create?: XOR<TermsCreateWithoutDisciplinesInput, TermsUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: TermsCreateOrConnectWithoutDisciplinesInput
    upsert?: TermsUpsertWithoutDisciplinesInput
    connect?: TermsWhereUniqueInput
    update?: XOR<TermsUpdateWithoutDisciplinesInput, TermsUncheckedUpdateWithoutDisciplinesInput>
  }

  export type TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutDisciplineInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    set?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    disconnect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    delete?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    update?: Enumerable<TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<TeachersDisciplinesScalarWhereInput>
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Enumerable<TeachersDisciplinesCreateWithoutDisciplineInput>, Enumerable<TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<TeachersDisciplinesCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    set?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    disconnect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    delete?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    connect?: Enumerable<TeachersDisciplinesWhereUniqueInput>
    update?: Enumerable<TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<TeachersDisciplinesScalarWhereInput>
  }

  export type DisciplinesCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<DisciplinesCreateWithoutTermInput>, Enumerable<DisciplinesUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<DisciplinesCreateOrConnectWithoutTermInput>
    createMany?: DisciplinesCreateManyTermInputEnvelope
    connect?: Enumerable<DisciplinesWhereUniqueInput>
  }

  export type DisciplinesUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<DisciplinesCreateWithoutTermInput>, Enumerable<DisciplinesUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<DisciplinesCreateOrConnectWithoutTermInput>
    createMany?: DisciplinesCreateManyTermInputEnvelope
    connect?: Enumerable<DisciplinesWhereUniqueInput>
  }

  export type DisciplinesUpdateManyWithoutTermNestedInput = {
    create?: XOR<Enumerable<DisciplinesCreateWithoutTermInput>, Enumerable<DisciplinesUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<DisciplinesCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<DisciplinesUpsertWithWhereUniqueWithoutTermInput>
    createMany?: DisciplinesCreateManyTermInputEnvelope
    set?: Enumerable<DisciplinesWhereUniqueInput>
    disconnect?: Enumerable<DisciplinesWhereUniqueInput>
    delete?: Enumerable<DisciplinesWhereUniqueInput>
    connect?: Enumerable<DisciplinesWhereUniqueInput>
    update?: Enumerable<DisciplinesUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<DisciplinesUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<DisciplinesScalarWhereInput>
  }

  export type DisciplinesUncheckedUpdateManyWithoutTermNestedInput = {
    create?: XOR<Enumerable<DisciplinesCreateWithoutTermInput>, Enumerable<DisciplinesUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<DisciplinesCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<DisciplinesUpsertWithWhereUniqueWithoutTermInput>
    createMany?: DisciplinesCreateManyTermInputEnvelope
    set?: Enumerable<DisciplinesWhereUniqueInput>
    disconnect?: Enumerable<DisciplinesWhereUniqueInput>
    delete?: Enumerable<DisciplinesWhereUniqueInput>
    connect?: Enumerable<DisciplinesWhereUniqueInput>
    update?: Enumerable<DisciplinesUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<DisciplinesUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<DisciplinesScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type TestsCreateWithoutCategoryInput = {
    name: string
    pdfUrl: string
    teachersDiscipline: TeachersDisciplinesCreateNestedOneWithoutTestsInput
  }

  export type TestsUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    pdfUrl: string
    teachersDisciplineId: number
  }

  export type TestsCreateOrConnectWithoutCategoryInput = {
    where: TestsWhereUniqueInput
    create: XOR<TestsCreateWithoutCategoryInput, TestsUncheckedCreateWithoutCategoryInput>
  }

  export type TestsCreateManyCategoryInputEnvelope = {
    data: Enumerable<TestsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TestsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TestsWhereUniqueInput
    update: XOR<TestsUpdateWithoutCategoryInput, TestsUncheckedUpdateWithoutCategoryInput>
    create: XOR<TestsCreateWithoutCategoryInput, TestsUncheckedCreateWithoutCategoryInput>
  }

  export type TestsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TestsWhereUniqueInput
    data: XOR<TestsUpdateWithoutCategoryInput, TestsUncheckedUpdateWithoutCategoryInput>
  }

  export type TestsUpdateManyWithWhereWithoutCategoryInput = {
    where: TestsScalarWhereInput
    data: XOR<TestsUpdateManyMutationInput, TestsUncheckedUpdateManyWithoutTestsInput>
  }

  export type TestsScalarWhereInput = {
    AND?: Enumerable<TestsScalarWhereInput>
    OR?: Enumerable<TestsScalarWhereInput>
    NOT?: Enumerable<TestsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    pdfUrl?: StringFilter | string
    categoryId?: IntFilter | number
    teachersDisciplineId?: IntFilter | number
  }

  export type CategoriesCreateWithoutTestsInput = {
    name: string
  }

  export type CategoriesUncheckedCreateWithoutTestsInput = {
    id?: number
    name: string
  }

  export type CategoriesCreateOrConnectWithoutTestsInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutTestsInput, CategoriesUncheckedCreateWithoutTestsInput>
  }

  export type TeachersDisciplinesCreateWithoutTestsInput = {
    teacher: TeachersCreateNestedOneWithoutTeachersDisciplinesInput
    discipline: DisciplinesCreateNestedOneWithoutTeachersDisciplinesInput
  }

  export type TeachersDisciplinesUncheckedCreateWithoutTestsInput = {
    id?: number
    teacherId: number
    disciplineId: number
  }

  export type TeachersDisciplinesCreateOrConnectWithoutTestsInput = {
    where: TeachersDisciplinesWhereUniqueInput
    create: XOR<TeachersDisciplinesCreateWithoutTestsInput, TeachersDisciplinesUncheckedCreateWithoutTestsInput>
  }

  export type CategoriesUpsertWithoutTestsInput = {
    update: XOR<CategoriesUpdateWithoutTestsInput, CategoriesUncheckedUpdateWithoutTestsInput>
    create: XOR<CategoriesCreateWithoutTestsInput, CategoriesUncheckedCreateWithoutTestsInput>
  }

  export type CategoriesUpdateWithoutTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesUncheckedUpdateWithoutTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersDisciplinesUpsertWithoutTestsInput = {
    update: XOR<TeachersDisciplinesUpdateWithoutTestsInput, TeachersDisciplinesUncheckedUpdateWithoutTestsInput>
    create: XOR<TeachersDisciplinesCreateWithoutTestsInput, TeachersDisciplinesUncheckedCreateWithoutTestsInput>
  }

  export type TeachersDisciplinesUpdateWithoutTestsInput = {
    teacher?: TeachersUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
    discipline?: DisciplinesUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateWithoutTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersCreateWithoutTeachersDisciplinesInput = {
    name: string
  }

  export type TeachersUncheckedCreateWithoutTeachersDisciplinesInput = {
    id?: number
    name: string
  }

  export type TeachersCreateOrConnectWithoutTeachersDisciplinesInput = {
    where: TeachersWhereUniqueInput
    create: XOR<TeachersCreateWithoutTeachersDisciplinesInput, TeachersUncheckedCreateWithoutTeachersDisciplinesInput>
  }

  export type DisciplinesCreateWithoutTeachersDisciplinesInput = {
    name: string
    term: TermsCreateNestedOneWithoutDisciplinesInput
  }

  export type DisciplinesUncheckedCreateWithoutTeachersDisciplinesInput = {
    id?: number
    name: string
    termId: number
  }

  export type DisciplinesCreateOrConnectWithoutTeachersDisciplinesInput = {
    where: DisciplinesWhereUniqueInput
    create: XOR<DisciplinesCreateWithoutTeachersDisciplinesInput, DisciplinesUncheckedCreateWithoutTeachersDisciplinesInput>
  }

  export type TestsCreateWithoutTeachersDisciplineInput = {
    name: string
    pdfUrl: string
    category: CategoriesCreateNestedOneWithoutTestsInput
  }

  export type TestsUncheckedCreateWithoutTeachersDisciplineInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
  }

  export type TestsCreateOrConnectWithoutTeachersDisciplineInput = {
    where: TestsWhereUniqueInput
    create: XOR<TestsCreateWithoutTeachersDisciplineInput, TestsUncheckedCreateWithoutTeachersDisciplineInput>
  }

  export type TestsCreateManyTeachersDisciplineInputEnvelope = {
    data: Enumerable<TestsCreateManyTeachersDisciplineInput>
    skipDuplicates?: boolean
  }

  export type TeachersUpsertWithoutTeachersDisciplinesInput = {
    update: XOR<TeachersUpdateWithoutTeachersDisciplinesInput, TeachersUncheckedUpdateWithoutTeachersDisciplinesInput>
    create: XOR<TeachersCreateWithoutTeachersDisciplinesInput, TeachersUncheckedCreateWithoutTeachersDisciplinesInput>
  }

  export type TeachersUpdateWithoutTeachersDisciplinesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersUncheckedUpdateWithoutTeachersDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinesUpsertWithoutTeachersDisciplinesInput = {
    update: XOR<DisciplinesUpdateWithoutTeachersDisciplinesInput, DisciplinesUncheckedUpdateWithoutTeachersDisciplinesInput>
    create: XOR<DisciplinesCreateWithoutTeachersDisciplinesInput, DisciplinesUncheckedCreateWithoutTeachersDisciplinesInput>
  }

  export type DisciplinesUpdateWithoutTeachersDisciplinesInput = {
    name?: StringFieldUpdateOperationsInput | string
    term?: TermsUpdateOneRequiredWithoutDisciplinesNestedInput
  }

  export type DisciplinesUncheckedUpdateWithoutTeachersDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    termId?: IntFieldUpdateOperationsInput | number
  }

  export type TestsUpsertWithWhereUniqueWithoutTeachersDisciplineInput = {
    where: TestsWhereUniqueInput
    update: XOR<TestsUpdateWithoutTeachersDisciplineInput, TestsUncheckedUpdateWithoutTeachersDisciplineInput>
    create: XOR<TestsCreateWithoutTeachersDisciplineInput, TestsUncheckedCreateWithoutTeachersDisciplineInput>
  }

  export type TestsUpdateWithWhereUniqueWithoutTeachersDisciplineInput = {
    where: TestsWhereUniqueInput
    data: XOR<TestsUpdateWithoutTeachersDisciplineInput, TestsUncheckedUpdateWithoutTeachersDisciplineInput>
  }

  export type TestsUpdateManyWithWhereWithoutTeachersDisciplineInput = {
    where: TestsScalarWhereInput
    data: XOR<TestsUpdateManyMutationInput, TestsUncheckedUpdateManyWithoutTestsInput>
  }

  export type TeachersDisciplinesCreateWithoutTeacherInput = {
    discipline: DisciplinesCreateNestedOneWithoutTeachersDisciplinesInput
    Tests?: TestsCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesUncheckedCreateWithoutTeacherInput = {
    id?: number
    disciplineId: number
    Tests?: TestsUncheckedCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesCreateOrConnectWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    create: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersDisciplinesCreateManyTeacherInputEnvelope = {
    data: Enumerable<TeachersDisciplinesCreateManyTeacherInput>
    skipDuplicates?: boolean
  }

  export type TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    update: XOR<TeachersDisciplinesUpdateWithoutTeacherInput, TeachersDisciplinesUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    data: XOR<TeachersDisciplinesUpdateWithoutTeacherInput, TeachersDisciplinesUncheckedUpdateWithoutTeacherInput>
  }

  export type TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput = {
    where: TeachersDisciplinesScalarWhereInput
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyWithoutTeachersDisciplinesInput>
  }

  export type TeachersDisciplinesScalarWhereInput = {
    AND?: Enumerable<TeachersDisciplinesScalarWhereInput>
    OR?: Enumerable<TeachersDisciplinesScalarWhereInput>
    NOT?: Enumerable<TeachersDisciplinesScalarWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
    disciplineId?: IntFilter | number
  }

  export type TermsCreateWithoutDisciplinesInput = {
    number: number
  }

  export type TermsUncheckedCreateWithoutDisciplinesInput = {
    id?: number
    number: number
  }

  export type TermsCreateOrConnectWithoutDisciplinesInput = {
    where: TermsWhereUniqueInput
    create: XOR<TermsCreateWithoutDisciplinesInput, TermsUncheckedCreateWithoutDisciplinesInput>
  }

  export type TeachersDisciplinesCreateWithoutDisciplineInput = {
    teacher: TeachersCreateNestedOneWithoutTeachersDisciplinesInput
    Tests?: TestsCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesUncheckedCreateWithoutDisciplineInput = {
    id?: number
    teacherId: number
    Tests?: TestsUncheckedCreateNestedManyWithoutTeachersDisciplineInput
  }

  export type TeachersDisciplinesCreateOrConnectWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    create: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesCreateManyDisciplineInputEnvelope = {
    data: Enumerable<TeachersDisciplinesCreateManyDisciplineInput>
    skipDuplicates?: boolean
  }

  export type TermsUpsertWithoutDisciplinesInput = {
    update: XOR<TermsUpdateWithoutDisciplinesInput, TermsUncheckedUpdateWithoutDisciplinesInput>
    create: XOR<TermsCreateWithoutDisciplinesInput, TermsUncheckedCreateWithoutDisciplinesInput>
  }

  export type TermsUpdateWithoutDisciplinesInput = {
    number?: IntFieldUpdateOperationsInput | number
  }

  export type TermsUncheckedUpdateWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    update: XOR<TeachersDisciplinesUpdateWithoutDisciplineInput, TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput>
    create: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    data: XOR<TeachersDisciplinesUpdateWithoutDisciplineInput, TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput = {
    where: TeachersDisciplinesScalarWhereInput
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyWithoutTeachersDisciplinesInput>
  }

  export type DisciplinesCreateWithoutTermInput = {
    name: string
    TeachersDisciplines?: TeachersDisciplinesCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplinesUncheckedCreateWithoutTermInput = {
    id?: number
    name: string
    TeachersDisciplines?: TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplinesCreateOrConnectWithoutTermInput = {
    where: DisciplinesWhereUniqueInput
    create: XOR<DisciplinesCreateWithoutTermInput, DisciplinesUncheckedCreateWithoutTermInput>
  }

  export type DisciplinesCreateManyTermInputEnvelope = {
    data: Enumerable<DisciplinesCreateManyTermInput>
    skipDuplicates?: boolean
  }

  export type DisciplinesUpsertWithWhereUniqueWithoutTermInput = {
    where: DisciplinesWhereUniqueInput
    update: XOR<DisciplinesUpdateWithoutTermInput, DisciplinesUncheckedUpdateWithoutTermInput>
    create: XOR<DisciplinesCreateWithoutTermInput, DisciplinesUncheckedCreateWithoutTermInput>
  }

  export type DisciplinesUpdateWithWhereUniqueWithoutTermInput = {
    where: DisciplinesWhereUniqueInput
    data: XOR<DisciplinesUpdateWithoutTermInput, DisciplinesUncheckedUpdateWithoutTermInput>
  }

  export type DisciplinesUpdateManyWithWhereWithoutTermInput = {
    where: DisciplinesScalarWhereInput
    data: XOR<DisciplinesUpdateManyMutationInput, DisciplinesUncheckedUpdateManyWithoutDisciplinesInput>
  }

  export type DisciplinesScalarWhereInput = {
    AND?: Enumerable<DisciplinesScalarWhereInput>
    OR?: Enumerable<DisciplinesScalarWhereInput>
    NOT?: Enumerable<DisciplinesScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    termId?: IntFilter | number
  }

  export type TestsCreateManyCategoryInput = {
    id?: number
    name: string
    pdfUrl: string
    teachersDisciplineId: number
  }

  export type TestsUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    teachersDiscipline?: TeachersDisciplinesUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    teachersDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestsUncheckedUpdateManyWithoutTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    teachersDisciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TestsCreateManyTeachersDisciplineInput = {
    id?: number
    name: string
    pdfUrl: string
    categoryId: number
  }

  export type TestsUpdateWithoutTeachersDisciplineInput = {
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    category?: CategoriesUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestsUncheckedUpdateWithoutTeachersDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateManyTeacherInput = {
    id?: number
    disciplineId: number
  }

  export type TeachersDisciplinesUpdateWithoutTeacherInput = {
    discipline?: DisciplinesUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
    Tests?: TestsUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
    Tests?: TestsUncheckedUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutTeachersDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateManyDisciplineInput = {
    id?: number
    teacherId: number
  }

  export type TeachersDisciplinesUpdateWithoutDisciplineInput = {
    teacher?: TeachersUpdateOneRequiredWithoutTeachersDisciplinesNestedInput
    Tests?: TestsUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    Tests?: TestsUncheckedUpdateManyWithoutTeachersDisciplineNestedInput
  }

  export type DisciplinesCreateManyTermInput = {
    id?: number
    name: string
  }

  export type DisciplinesUpdateWithoutTermInput = {
    name?: StringFieldUpdateOperationsInput | string
    TeachersDisciplines?: TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplinesUncheckedUpdateWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    TeachersDisciplines?: TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplinesUncheckedUpdateManyWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}